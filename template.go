// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// tmpl/swagger.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x4d\x8f\xd3\x30\x10\xbd\xe7\x57\x8c\xaa\x1e\xb7\x51\x05\xb7\x48\x1c\x58\x40\x0b\x12\x8b\x2a\x54\x71\xb7\x92\x49\x63\x6d\x62\x7b\xc7\x76\x97\xa8\xcd\x7f\x47\xe3\x7c\x39\x29\xb0\xdc\xc8\x29\x7e\x7e\xf3\xe6\xbd\xf1\x68\x83\x4a\x18\x99\xc1\xdb\x74\x9f\xee\x13\xa9\x4a\x9d\x25\x00\x05\xda\x9c\xa4\x71\x52\xab\x0c\x36\x97\x0b\xa4\x1f\xb4\x2a\xe5\x29\xfd\x38\x5f\x40\xd7\x6d\x12\x80\x33\x92\xbd\xa1\xfd\xe8\xc1\x81\xe2\xa4\xab\x71\x49\x38\x32\x14\xae\x2d\x12\x4b\x70\xd7\x1d\x78\xaa\x97\xbc\x7b\x61\xf1\x20\x5c\x15\xa8\x4e\x9c\x6c\x96\x5c\x2e\x40\x42\x9d\x10\xb6\x4f\xd8\xde\xc1\xf6\x2c\x6a\x8f\x90\xbd\x83\xf4\x93\x72\xd2\x49\xb4\xd0\x75\xc9\x0e\x94\x68\x86\xa6\x4c\x84\x2b\x3c\xa0\x7b\x20\xed\xcd\x37\xd1\xe0\xe0\x6c\x99\x73\xc3\xda\xa8\x0a\xae\x37\xc2\x55\xa1\xd9\x6e\xd9\x2d\xe0\x37\xdd\x22\x1a\x13\xee\x60\x4b\x68\xb5\xa7\x1c\x03\x77\xa8\xea\xba\x04\x80\xfd\xf0\x11\xae\xf0\x1d\x1b\x7d\x0e\xf1\x0e\x84\xa5\xfc\xd9\x75\x3c\x05\xa6\xcc\x4d\x9f\x22\xad\x20\x35\x0b\x07\xb9\x5e\x70\x04\xd3\x47\x74\x95\x2e\xe0\x0a\x47\xfd\x55\xbf\x20\xc1\xa8\x09\xd0\x4f\xaf\xff\xdf\xbd\x32\x17\xfe\xac\x6f\x1a\x41\xed\x30\xc2\xa9\xc3\x8a\xc5\x5e\x65\x09\x9a\x22\xca\x41\x90\x68\xd0\x21\xd9\x08\xbc\xd7\x45\xdb\xdf\xc4\xe8\x67\x14\x05\xf3\x86\x2c\x93\xde\xaa\xee\x51\x36\x78\x6c\x0d\xce\xbc\x9b\x0d\x9d\x2b\x6e\x77\x74\x14\x1e\xde\xb6\x07\xcc\xe4\x32\x8b\x28\xe3\x2b\x86\xa7\x26\xd1\x2c\x66\x1e\x25\x9b\x64\x16\x8b\x16\x4a\xd6\x23\x02\x90\xec\xf1\xd9\x23\xb5\x33\x66\xf3\x0a\x1b\x91\x4d\x67\x00\xd7\x1a\xd6\xb1\x8e\xa4\x3a\xcd\xc4\xf5\x8e\x8e\x38\xe1\xb3\x97\x84\x45\x06\x8e\x3c\xfe\x29\xe5\xeb\x99\x86\x27\x88\x2a\x78\xfe\x7d\x92\x2f\xf6\x7d\x5d\xeb\x17\x8c\x04\xff\x39\x6f\x15\x74\xff\x4b\xe0\xbf\x03\x84\xd6\x68\x65\xd1\xce\x5e\xde\xec\xf7\xb1\xb1\xa5\x03\xeb\xf3\x1c\xad\x2d\x7d\x0d\xda\x20\x09\x86\x37\xc9\x4a\xfa\xf7\xbf\xbf\x02\x00\x00\xff\xff\xd6\xb9\xdd\x6c\x5f\x05\x00\x00")

func tmplSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmplSwaggerYaml,
		"tmpl/swagger.yaml",
	)
}

func tmplSwaggerYaml() (*asset, error) {
	bytes, err := tmplSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/swagger.yaml", size: 1375, mode: os.FileMode(420), modTime: time.Unix(1583316832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/swagger.yaml": tmplSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"swagger.yaml": &bintree{tmplSwaggerYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
